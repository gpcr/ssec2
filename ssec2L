#!/bin/bash

source $HOME/.ssec2

THIS_PATH="`dirname \"$0\"`"
THIS_PATH="`( cd \"$THIS_PATH\" && pwd )`" 

usage()
{
    cat << EOF

usage: $0 OPTIONS <script> <arg 1> <arg 2> <...>

OPTIONS can be:
    -h      Show this message
    -i      Image id (default Ubuntu Server:$AMI)
    -t      Type (default t2.micro)
    -k      SSH key name (default $KEY_NAME)
    -r      AMI region (default $AMI_REGION)
    -s      Security group (default $SECURITY_GROUP)
    -n      Run name (required when submitting a script)
    -o      Output JSON file
    -b      Bid price for a spot instance (e.g., 0.01)
    -d      Dry run
EOF
}

#if test -z "$1"
#then
#    usage
#    exit
#fi

TYPE="t2.micro"
JSON_OUT=
DRYRUN=0
NAME=
FILE_NAME=
BID=

# Check options passed in.
while getopts "h i:t:k:r:s:u:o:n:db:" OPTION
do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        i)
            AMI=$OPTARG
            ;;
        t)
            TYPE=$OPTARG
            ;;
        k)
            KEY_NAME=`echo $OPTARG | xargs -I{} basename {} .pem`
            ;;
        r)
            AMI_REGION=$OPTARG
            ;;
        s)
            SECURITY_GROUP=$OPTARG
            ;;
        o)
            JSON_OUT=$OPTARG
            ;;
        n)
            NAME=$OPTARG
            ;;
        d)
            DRYRUN=1
            ;;
        b)
            BID=$OPTARG
            ;;
        ?)
            usage
            exit
            ;;
    esac
done

shift $(($OPTIND - 1))


if [ -z "$KEY_NAME" ]
then
    echo "No key name"
    usage
    exit
fi

if [ -z "$SECURITY_GROUP" ]
then
    echo "No security group"
    usage
    exit
fi

if [ -z "$BID" ]
then
    CMD="aws ec2 run-instances \
        --image-id $AMI \
        --key-name $KEY_NAME  \
        --instance-type $TYPE \
        --region $AMI_REGION \
        --security-groups $SECURITY_GROUP \
        --instance-initiated-shutdown-behavior terminate \
    "
    if [ "$#" -gt "0" ]
    then
        if [ -z "$NAME" ]
        then
            echo "No name given."
            usage
            exit
        fi

        SCRIPT=$1
        ARGS=${@:2}

        if [ ! -e $SCRIPT ]
        then
            echo "File $SCRIPT does not exist"
            exit
        fi

        FILE_NAME=launch.$RANDOM.sh
        $THIS_PATH/wrap_cmd.sh $NAME $SCRIPT $ARGS > $FILE_NAME
        CMD+="\
        --user-data file://$FILE_NAME"
    fi
else
    CMD="aws ec2 request-spot-instances \
        --spot-price $BID \
        --instance-count 1 \
        --region $AMI_REGION \
        --launch-specification \
            \"{ \\\"ImageId\\\":\\\"$AMI\\\", \
                \\\"InstanceType\\\":\\\"$TYPE\\\", \
                \\\"KeyName\\\":\\\"$KEY_NAME\\\", \
                \\\"SecurityGroups\\\": [\\\"$SECURITY_GROUP\\\"], \
                \\\"Monitoring\\\": { \\\"Enabled\\\": true }"
    if [ "$#" -gt "0" ]
    then

        SCRIPT=$1
        ARGS=${@:2}

        if [ ! -e $SCRIPT ]
        then
            echo "File $SCRIPT does not exist"
            exit
        fi

        FILE_NAME=launch.$RANDOM.sh
        $THIS_PATH/wrap_cmd.sh $NAME $SCRIPT $ARGS > $FILE_NAME

        CMD+=",\
                \\\"UserData\\\":\\\"`base64 $FILE_NAME`\\\""
    fi
    CMD+="}\""
    echo $CMD
fi

if [ "$DRYRUN" -eq "1" ]
then
    CMD+="\
    --dry-run"
fi

O=ec2_launch.$RANDOM.json
eval $CMD > $O

date >> $LOG_FILE
echo $CMD >> $LOG_FILE

if [ -z "$BID" ]
then
    cat $O | jq -r .Instances[0].InstanceId >> $LOG_FILE
    cat $O | jq -r .Instances[0].InstanceId

    aws ec2 monitor-instances --region $AMI_REGION \
        --instance-ids `cat $O | jq -r .Instances[0].InstanceId` \
    | jq -r "\"Monitoring state: \" + .InstanceMonitorings[].Monitoring.State"

    if [ ! -z "$NAME" ]
    then
    aws ec2 create-tags \
        --resources `cat $O  | jq -r .Instances[0].InstanceId` \
        --tags Key=Name,Value=$NAME --region $AMI_REGION 
    fi
fi

rm $O

if [ ! -z $FILE_NAME ]
then
    rm -f $FILE_NAME
fi
